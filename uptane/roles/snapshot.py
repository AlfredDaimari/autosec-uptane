# snapshot role

import uptane.crypto.hash
import uptane.time
from uptane.roles.role import AutoRole, TarSnapManualRole
import tomli
from uptane.error.general import FileHashNoMatch, MetadataFileHasExpired

ONLINE_SNAPSHOT_SPEC_VERSION = "0.0.1"
OFFLINE_SNAPSHOT_SPEC_VERSION = "0.0.1"


class SnapshotOnline(AutoRole):
    '''
        Class inheriting the Snapshot role of Uptane

    '''

    def __init__(self, cfg: str) -> None:
        AutoRole.__init__(self, cfg)

    def sign_targets_metadata(self, metadata_file) -> None:
        '''
        Sign the metadata file received from Target Role
        '''
        self.sign_metadata(metadata_file)


class SnapshotOffline(TarSnapManualRole):
    '''
    Snapshot Offline Role
    This will role will sign metadata file generated by targets and put in toml file
    '''

    def __init__(self, cfg: str, image_cfg: str,
                 targets_metadata_file: str) -> None:
        '''
        Generate the Snapshot metadata file for signing
            Parameters:
                cfg (str): path to role config
                image_cfg (str): path to image configuration file 
                target_metadata_file (str): path to target metadata file

            Raises:
                FileNotFoundError
                tomli.TOMLDecodeError
                uptane.error.snapshot.SnapshotTargetsFileHashNoMatch - when snapshot image
                file hash does not match with image hash in targets metadata file
        '''
        TarSnapManualRole.__init__(self, cfg, image_cfg)
        self.targets_metadata_file = targets_metadata_file

        with open(targets_metadata_file, "rb") as f:

            self.targets_metadata_file_dict = tomli.load(f)

            self.signed_dict["spec_version"] = OFFLINE_SNAPSHOT_SPEC_VERSION
            self.signed_dict["_type"] = "snapshot"

            self.__generate_metadata()

    def __generate_metadata(self) -> None:
        '''
        Populate the signed dict that will be converted to a toml file

        NOTE: Important - for now it verfies the targets image hash with only sha256 hash 
        using anyother func will ultimately make it fail
        '''
        self.signed_dict["targets_metadata_file_hash"] = \
        uptane.crypto.hash.get_file_hash(self.targets_metadata_file, \
        uptane.crypto.hash.HashFunc.sha256, self.bufsize)

        if uptane.time.fut24_is_expired(
                int(self.targets_metadata_file_dict["signed"]["expires"])):
            raise MetadataFileHasExpired

        if self.signed_dict["image_hash"] != self.targets_metadata_file_dict[
                "signed"]["image_hash"]:
            raise FileHashNoMatch
